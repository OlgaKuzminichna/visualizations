aes(x = Age, y=reorder(LeagueRanked, -League_Rank), fill = LeagueRanked) +  # Sort leagues by rank
geom_boxplot( color = "666666") +
scale_fill_observable()+
labs(title = "Age Distribution", x = "Age", y = NULL) +
theme(axis.text.y = element_blank(), legend.position = "none",plot.title = element_text(size = 14))
# ðŸ–¼ **Combine the graphs horizontally**
p1 + p2 + plot_layout(ncol = 2)+
plot_annotation(title = "Overall Score and Age Distribution Across Top Football Leagues")
ggplot(df_clean) +
aes(x = Overall.Score, y = Potential.Score,  color = Growth) +
geom_jitter() +
scale_color_gradient(low = "gray", high = "#00A087B2") +
geom_smooth(method = "lm", formula = y ~ x, color = "#ff4c4c", linetype = "dashed", se = FALSE) +
geom_smooth(method = "lm", formula = x ~ y, color = "#ff4c4c", linetype = "dashed", se = FALSE) +
facet_wrap(vars(reorder(LeagueRanked, League_Rank)),  ncol=5L)+
scale_fill_observable()+
labs(title = "Where Future Superstars Emerge", x = "Overall Score", y = "Potential Score") +
theme( legend.position = "right",  legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))
# Compute median values per league
league_medians <- df_clean %>%
group_by(LeagueRanked) %>%
summarise(
median_overall = median(Overall.Score, na.rm = TRUE),
median_potential = median(Potential.Score, na.rm = TRUE)
)
# Merge median values back into the dataset
df_clean <- df_clean %>%
left_join(league_medians, by = "LeagueRanked")%>% mutate( Quadrant = case_when(
Overall.Score >= 70 & Potential.Score >=70 ~ "High Overall, High Potential",
Overall.Score >= 70 & Potential.Score < 70 ~ "High Overall, Low Potential",
Overall.Score < 70 & Potential.Score >= 70 ~ "Low Overall, High Potential",
Overall.Score < 70 & Potential.Score < 70 ~ "Low Overall, Low Potential"
))
# Plot with central axes
ggplot(df_clean) +
aes(x = Overall.Score, y = Potential.Score, color = Quadrant) +
# Scatter points with color gradient
geom_jitter(alpha = 0.6) +
scale_color_manual(values = c(
"High Overall, High Potential" = "#1b9e77",  # Green
"High Overall, Low Potential" = "#d95f02",   # Orange
"Low Overall, High Potential" = "#7570b3",   # Blue
"Low Overall, Low Potential" = "#e7298a"     # Pink
)) +
# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) +
facet_wrap(vars(reorder(LeagueRanked, League_Rank)),  ncol = 5L) +
labs(title = "Where Future Superstars Emerge",
x = "Overall Score",
y = "Potential Score") +
theme(legend.position = "right",
legend.key.height = unit(1, "cm"),
plot.title = element_text(size = 14))
# Plot with central axes
ggplot(df_clean) +
aes(x = Overall.Score, y = Potential.Score, color = Quadrant) +
# Scatter points with color gradient
geom_jitter(alpha = 0.6) +
scale_color_manual(values = c(
"High Overall, High Potential" = "#1b9e77",  # Green
"High Overall, Low Potential" = "#d95f02",   # Orange
"Low Overall, High Potential" = "#7570b3",   # Blue
"Low Overall, Low Potential" = "#e7298a"     # Pink
)) +
# Horizontal median line for each league
geom_vline(aes(xintercept = 70), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = 70), color = "gray40", linetype = "dashed", linewidth = 1) +
facet_wrap(vars(reorder(LeagueRanked, League_Rank)),  ncol = 5L) +
labs(title = "Where Future Superstars Emerge",
x = "Overall Score",
y = "Potential Score") +
theme(legend.position = "right",
legend.key.height = unit(1, "cm"),
plot.title = element_text(size = 14))
df_clean %>%
summarise(
median_overall = median(Overall.Score, na.rm = TRUE),
median_potential = median(Potential.Score, na.rm = TRUE)
)
rm(list = ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggrepel)
library(scales)
library(plotly)
library(hrbrthemes)
library(showtext)
setwd("C:\\Users\\Olga\\0. VS Code\\Github\\visualizations\\")
df<-read.csv("data\\fifa_players.csv")%>%
filter(Source_File=="combined_fifa_players_20241112_163726")
league_rankings <- data.frame(
League = c( "SÃ¼per Lig (TÃ¼rkiye)", "Liga Profesional de FÃºtbol (Argentina)",
"Eredivisie (Netherlands)", "SÃ©rie A (Brazil)", "Primeira Liga (Portugal)", "Ligue 1 (France)",
"Serie A (Italy)", "Bundesliga (Germany)", "La Liga (Spain)", "Premier League (England)"),
League_Rank = 10:1
)
median_overall<-df_clean %>%summarise(
median(Overall.Score, na.rm = TRUE)
)
rm(list = ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggrepel)
library(scales)
library(plotly)
library(hrbrthemes)
library(showtext)
setwd("C:\\Users\\Olga\\0. VS Code\\Github\\visualizations\\")
df<-read.csv("data\\fifa_players.csv")%>%
filter(Source_File=="combined_fifa_players_20241112_163726")
league_rankings <- data.frame(
League = c( "SÃ¼per Lig (TÃ¼rkiye)", "Liga Profesional de FÃºtbol (Argentina)",
"Eredivisie (Netherlands)", "SÃ©rie A (Brazil)", "Primeira Liga (Portugal)", "Ligue 1 (France)",
"Serie A (Italy)", "Bundesliga (Germany)", "La Liga (Spain)", "Premier League (England)"),
League_Rank = 10:1
)
df_clean<- df %>%
left_join(league_rankings, by = "League") %>% mutate(
Wage  = str_remove_all(Wage, "â‚¬"),
Wage  = str_replace(Wage, "K", ""),
Wage = as.numeric(Wage),
Value  = str_remove_all(Value, "â‚¬"),
Value  = str_replace(Value, "K", ""),
Value = as.numeric(Value),
Release.Clause  = str_remove_all(Release.Clause, "â‚¬"),
Release.Clause  = str_replace(Release.Clause, "K", ""),
Release.Clause = as.numeric(Release.Clause),
Contract.Start = as.numeric(Contract.Start),
Contract.End = as.numeric(Contract.End),
Contract.Duration=Contract.End-Contract.Start,
Height_cm = as.numeric(str_extract(Height, "\\d+")),
Weight_kg = as.numeric(str_extract(Weight, "\\d+")),
Finishing = as.numeric(str_remove(Finishing, "\\+\\d+")),
Overall.Score = as.numeric(str_remove(Overall.Score, "\\+\\d+")),
Potential.Score = as.numeric(str_remove(Potential.Score, "\\+\\d+")),
Role = case_when(
str_detect(Best.Position, "ST|CF|LW|RW") ~ "Attacker",
str_detect(Best.Position, "CM|CAM|CDM|LM|RM|LWB|RWB") ~ "Midfielder",
str_detect(Best.Position, "CB|LB|RB") ~ "Defender",
str_detect(Best.Position, "GK") ~ "Goalkeeper",
TRUE ~ "Unknown"
),
LeagueRanked = paste0("#", League_Rank, " ", League),
Performance_Score= case_when(
str_detect(Role,  "Attacker") ~ (5 * as.numeric(Finishing)) +
(4 * as.numeric(Dribbling)) +
(3 * as.numeric(Shot.Power)) +
(2 * as.numeric(Sprint.Speed))+
(1 * as.numeric(Attack.Position)),
str_detect(Role, "Midfielder") ~ (5 * as.numeric(Short.Passing)) +
(3 * as.numeric(Dribbling)) +
(4 * as.numeric(Vision)) +
(2 * as.numeric(Long.Passing)) +
(1 * as.numeric(Stamina)),
str_detect(Role, "Defender") ~ (5 * as.numeric(Standing.Tackle)) +
(4 * as.numeric(Interceptions)) +
(3 * as.numeric(Strength)) +
(2 * as.numeric(Defensive.Awareness)) +
(1 * as.numeric(Heading.Accuracy)),
str_detect(Role, "Goalkeeper") ~ (5 * as.numeric(GK.Reflexes)) +
(4 * as.numeric(GK.Diving)) +
(3 * as.numeric(GK.Handling)) +
(2 * as.numeric(GK.Positioning))+
(1 * as.numeric(GK.Positioning)),
TRUE ~ as.numeric(Overall.Score)  # Default if no match
),
mylabel = paste0(Player, " earns â‚¬", Wage, "K,", "\n",
"and has a Score of ", Performance_Score, "."))  %>%
filter(Role != "Unknown", !is.na(Wage), !is.na(Performance_Score), !is.na(Contract.Duration), League %in% league_rankings$League) %>%
select(-c(Position, Player.ID, Loan.End, Attacking.Work.Rate,
Defensive.Work.Rate, Source_File, Joined.Team))
median_overall<-df_clean %>%summarise(
median(Overall.Score, na.rm = TRUE)
)
median_potential<-df_clean %>%summarise(
median(Potential.Score, na.rm = TRUE)
)
df_clean<-df_clean %>% mutate( Quadrant = case_when(
Overall.Score >= median_overall & Potential.Score >=median_potential ~ "High Overall, High Potential",
Overall.Score >= median_overall & Potential.Score < median_potential ~ "High Overall, Low Potential",
Overall.Score < median_overall & Potential.Score >= median_potential ~ "Low Overall, High Potential",
Overall.Score < median_overall & Potential.Score < median_potential ~ "Low Overall, Low Potential"
))
england<-df_clean%>% filter(League== 	"Premier League (England)")
colnames(df_clean)
#glimpse(df_clean)
###Download Fonts
#must download font awesome locally first! https://fontawesome.com/download
library(hrbrthemes)
library(showtext)
showtext.auto()
setwd("C:\\Users\\Olga\\0. VS Code\\Github\\visualizations\\")
sysfonts::font_add('fs', 'fonts/otfs/Font Awesome 6 Free-Solid-900.otf')
sysfonts::font_add('fb', 'fonts/otfs/Font Awesome 6 Brands-Regular-400.otf')
sysfonts::font_add_google("Open Sans","opensans")
font_sans<-"opensans"
#sysfonts::font_add_google("IBM Plex Sans", "ibm_plex_sans")
font_add_google("IBM Plex Sans", "ibm_plex_sans_bold", bold.wt = 700)
theme_ipsum_rc <-theme_ipsum_rc(base_family = "ibm_plex_sans")+
theme(
text=element_text(size=14, color="#333333"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
plot.title = element_text(size=16, hjust = 0,vjust = 1,family = "fs", face = "bold", color="666666"),
axis.text = element_text(size = 14,family = "ibm_plex_sans"),
panel.grid.minor=element_blank(),
panel.grid.major=element_line(color="gray90"),
legend.position="top"
)
theme_set(theme_ipsum_rc)
#install.packages("patchwork")
#install.packages("ggsci")
library(ggsci)
library(patchwork)
# ðŸ“Š **Graph 1
p1 <- ggplot(df_clean) +
aes(x = Overall.Score, y = reorder(LeagueRanked, -League_Rank), fill = LeagueRanked) +  # Sort leagues by rank
geom_boxplot( color = "666666") +
scale_fill_observable()+
labs(title = "Score Distribution", x = "Overall Score", y = "League") +
theme( legend.position = "none",plot.title = element_text(size = 14))
# ðŸ“Š **Graph 2
p2 <- ggplot(df_clean) +
aes(x = Age, y=reorder(LeagueRanked, -League_Rank), fill = LeagueRanked) +  # Sort leagues by rank
geom_boxplot( color = "666666") +
scale_fill_observable()+
labs(title = "Age Distribution", x = "Age", y = NULL) +
theme(axis.text.y = element_blank(), legend.position = "none",plot.title = element_text(size = 14))
# ðŸ–¼ **Combine the graphs horizontally**
p1 + p2 + plot_layout(ncol = 2)+
plot_annotation(title = "Overall Score and Age Distribution Across Top Football Leagues")
ggplot(df_clean) +
aes(x = Overall.Score, y = Potential.Score, color = Quadrant) +
# Scatter points with color gradient
geom_jitter(alpha = 0.6) +
scale_color_manual(values = c(
"High Overall, High Potential" = "#1b9e77",  # Green
"High Overall, Low Potential" = "#d95f02",   # Orange
"Low Overall, High Potential" = "#7570b3",   # Blue
"Low Overall, Low Potential" = "#e7298a"     # Pink
)) +
# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) +
facet_wrap(vars(reorder(LeagueRanked, League_Rank)),  ncol = 5L) +
labs(title = "Where Future Superstars Emerge",
x = "Overall Score",
y = "Potential Score") +
theme(legend.position = "right",
legend.key.height = unit(1, "cm"),
plot.title = element_text(size = 14))
View(df_clean)
View(median_overall)
View(median_overall)
ggplot(df_clean) +
aes(x = Overall.Score, y = Potential.Score, color = Quadrant) +
geom_jitter(alpha = 0.6) +
scale_color_manual(values = c(
"High Overall, High Potential" = "#1b9e77",
"High Overall, Low Potential" = "#d95f02",
"Low Overall, High Potential" = "#7570b3",
"Low Overall, Low Potential" = "#e7298a"
)) +
# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall$`median(Overall.Score, na.rm = TRUE)`), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential$`median(Potential.Score, na.rm = TRUE)`), color = "gray40", linetype = "dashed", linewidth = 1) +
facet_wrap(vars(reorder(LeagueRanked, League_Rank)),  ncol = 5L) +
labs(title = "Where Future Superstars Emerge",
x = "Overall Score",
y = "Potential Score") +
theme(legend.position = "right",
legend.key.height = unit(1, "cm"),
plot.title = element_text(size = 14))
View(median_overall)
View(median_potential)
rm(list = ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggrepel)
library(scales)
library(plotly)
library(hrbrthemes)
library(showtext)
setwd("C:\\Users\\Olga\\0. VS Code\\Github\\visualizations\\")
df<-read.csv("data\\fifa_players.csv")%>%
filter(Source_File=="combined_fifa_players_20241112_163726")
league_rankings <- data.frame(
League = c( "SÃ¼per Lig (TÃ¼rkiye)", "Liga Profesional de FÃºtbol (Argentina)",
"Eredivisie (Netherlands)", "SÃ©rie A (Brazil)", "Primeira Liga (Portugal)", "Ligue 1 (France)",
"Serie A (Italy)", "Bundesliga (Germany)", "La Liga (Spain)", "Premier League (England)"),
League_Rank = 10:1
)
df_clean<- df %>%
left_join(league_rankings, by = "League") %>% mutate(
Wage  = str_remove_all(Wage, "â‚¬"),
Wage  = str_replace(Wage, "K", ""),
Wage = as.numeric(Wage),
Value  = str_remove_all(Value, "â‚¬"),
Value  = str_replace(Value, "K", ""),
Value = as.numeric(Value),
Release.Clause  = str_remove_all(Release.Clause, "â‚¬"),
Release.Clause  = str_replace(Release.Clause, "K", ""),
Release.Clause = as.numeric(Release.Clause),
Contract.Start = as.numeric(Contract.Start),
Contract.End = as.numeric(Contract.End),
Contract.Duration=Contract.End-Contract.Start,
Height_cm = as.numeric(str_extract(Height, "\\d+")),
Weight_kg = as.numeric(str_extract(Weight, "\\d+")),
Finishing = as.numeric(str_remove(Finishing, "\\+\\d+")),
Overall.Score = as.numeric(str_remove(Overall.Score, "\\+\\d+")),
Potential.Score = as.numeric(str_remove(Potential.Score, "\\+\\d+")),
Role = case_when(
str_detect(Best.Position, "ST|CF|LW|RW") ~ "Attacker",
str_detect(Best.Position, "CM|CAM|CDM|LM|RM|LWB|RWB") ~ "Midfielder",
str_detect(Best.Position, "CB|LB|RB") ~ "Defender",
str_detect(Best.Position, "GK") ~ "Goalkeeper",
TRUE ~ "Unknown"
),
LeagueRanked = paste0("#", League_Rank, " ", League),
Performance_Score= case_when(
str_detect(Role,  "Attacker") ~ (5 * as.numeric(Finishing)) +
(4 * as.numeric(Dribbling)) +
(3 * as.numeric(Shot.Power)) +
(2 * as.numeric(Sprint.Speed))+
(1 * as.numeric(Attack.Position)),
str_detect(Role, "Midfielder") ~ (5 * as.numeric(Short.Passing)) +
(3 * as.numeric(Dribbling)) +
(4 * as.numeric(Vision)) +
(2 * as.numeric(Long.Passing)) +
(1 * as.numeric(Stamina)),
str_detect(Role, "Defender") ~ (5 * as.numeric(Standing.Tackle)) +
(4 * as.numeric(Interceptions)) +
(3 * as.numeric(Strength)) +
(2 * as.numeric(Defensive.Awareness)) +
(1 * as.numeric(Heading.Accuracy)),
str_detect(Role, "Goalkeeper") ~ (5 * as.numeric(GK.Reflexes)) +
(4 * as.numeric(GK.Diving)) +
(3 * as.numeric(GK.Handling)) +
(2 * as.numeric(GK.Positioning))+
(1 * as.numeric(GK.Positioning)),
TRUE ~ as.numeric(Overall.Score)  # Default if no match
),
mylabel = paste0(Player, " earns â‚¬", Wage, "K,", "\n",
"and has a Score of ", Performance_Score, "."))  %>%
filter(Role != "Unknown", !is.na(Wage), !is.na(Performance_Score), !is.na(Contract.Duration), League %in% league_rankings$League) %>%
select(-c(Position, Player.ID, Loan.End, Attacking.Work.Rate,
Defensive.Work.Rate, Source_File, Joined.Team))
median_overall<-df_clean %>%summarise(
median(Overall.Score, na.rm = TRUE)%>%
.[[1]]
)
median_potential<-df_clean %>%summarise(
median(Potential.Score, na.rm = TRUE)%>%
.[[1]]
)
df_clean<-df_clean %>% mutate( Quadrant = case_when(
Overall.Score >= median_overall & Potential.Score >=median_potential ~ "High Overall, High Potential",
Overall.Score >= median_overall & Potential.Score < median_potential ~ "High Overall, Low Potential",
Overall.Score < median_overall & Potential.Score >= median_potential ~ "Low Overall, High Potential",
Overall.Score < median_overall & Potential.Score < median_potential ~ "Low Overall, Low Potential"
))
england<-df_clean%>% filter(League== 	"Premier League (England)")
View(median_overall)
View(df)
View(df_clean)
league_rankings <- data.frame(
League = c( "SÃ¼per Lig (TÃ¼rkiye)", "Liga Profesional de FÃºtbol (Argentina)",
"Eredivisie (Netherlands)", "SÃ©rie A (Brazil)", "Primeira Liga (Portugal)", "Ligue 1 (France)",
"Serie A (Italy)", "Bundesliga (Germany)", "La Liga (Spain)", "Premier League (England)"),
League_Rank = 10:1
)
df_clean<- df %>%
left_join(league_rankings, by = "League") %>% mutate(
Wage  = str_remove_all(Wage, "â‚¬"),
Wage  = str_replace(Wage, "K", ""),
Wage = as.numeric(Wage),
Value  = str_remove_all(Value, "â‚¬"),
Value  = str_replace(Value, "K", ""),
Value = as.numeric(Value),
Release.Clause  = str_remove_all(Release.Clause, "â‚¬"),
Release.Clause  = str_replace(Release.Clause, "K", ""),
Release.Clause = as.numeric(Release.Clause),
Contract.Start = as.numeric(Contract.Start),
Contract.End = as.numeric(Contract.End),
Contract.Duration=Contract.End-Contract.Start,
Height_cm = as.numeric(str_extract(Height, "\\d+")),
Weight_kg = as.numeric(str_extract(Weight, "\\d+")),
Finishing = as.numeric(str_remove(Finishing, "\\+\\d+")),
Overall.Score = as.numeric(str_remove(Overall.Score, "\\+\\d+")),
Potential.Score = as.numeric(str_remove(Potential.Score, "\\+\\d+")),
Role = case_when(
str_detect(Best.Position, "ST|CF|LW|RW") ~ "Attacker",
str_detect(Best.Position, "CM|CAM|CDM|LM|RM|LWB|RWB") ~ "Midfielder",
str_detect(Best.Position, "CB|LB|RB") ~ "Defender",
str_detect(Best.Position, "GK") ~ "Goalkeeper",
TRUE ~ "Unknown"
),
LeagueRanked = paste0("#", League_Rank, " ", League),
Performance_Score= case_when(
str_detect(Role,  "Attacker") ~ (5 * as.numeric(Finishing)) +
(4 * as.numeric(Dribbling)) +
(3 * as.numeric(Shot.Power)) +
(2 * as.numeric(Sprint.Speed))+
(1 * as.numeric(Attack.Position)),
str_detect(Role, "Midfielder") ~ (5 * as.numeric(Short.Passing)) +
(3 * as.numeric(Dribbling)) +
(4 * as.numeric(Vision)) +
(2 * as.numeric(Long.Passing)) +
(1 * as.numeric(Stamina)),
str_detect(Role, "Defender") ~ (5 * as.numeric(Standing.Tackle)) +
(4 * as.numeric(Interceptions)) +
(3 * as.numeric(Strength)) +
(2 * as.numeric(Defensive.Awareness)) +
(1 * as.numeric(Heading.Accuracy)),
str_detect(Role, "Goalkeeper") ~ (5 * as.numeric(GK.Reflexes)) +
(4 * as.numeric(GK.Diving)) +
(3 * as.numeric(GK.Handling)) +
(2 * as.numeric(GK.Positioning))+
(1 * as.numeric(GK.Positioning)),
TRUE ~ as.numeric(Overall.Score)  # Default if no match
),
mylabel = paste0(Player, " earns â‚¬", Wage, "K,", "\n",
"and has a Score of ", Performance_Score, "."))  %>%
filter(Role != "Unknown", !is.na(Wage), !is.na(Performance_Score), !is.na(Contract.Duration), League %in% league_rankings$League) %>%
select(-c(Position, Player.ID, Loan.End, Attacking.Work.Rate,
Defensive.Work.Rate, Source_File, Joined.Team))
median_overall <- df_clean %>%
summarise(median_value = median(Overall.Score, na.rm = TRUE)) %>%
pull(median_value)  # Converts it to a vector
median_potential <- df_clean %>%
summarise(median_value = median(Potential.Score, na.rm = TRUE)) %>%
pull(median_value)
df_clean<-df_clean %>% mutate( Quadrant = case_when(
Overall.Score >= median_overall & Potential.Score >=median_potential ~ "High Overall, High Potential",
Overall.Score >= median_overall & Potential.Score < median_potential ~ "High Overall, Low Potential",
Overall.Score < median_overall & Potential.Score >= median_potential ~ "Low Overall, High Potential",
Overall.Score < median_overall & Potential.Score < median_potential ~ "Low Overall, Low Potential"
))
england<-df_clean%>% filter(League== 	"Premier League (England)")
View(df_clean)
#install.packages("patchwork")
#install.packages("ggsci")
library(ggsci)
library(patchwork)
# ðŸ“Š **Graph 1
p1 <- ggplot(df_clean) +
aes(x = Overall.Score, y = reorder(LeagueRanked, -League_Rank), fill = LeagueRanked) +  # Sort leagues by rank
geom_boxplot( color = "666666") +
scale_fill_observable()+
labs(title = "Score Distribution", x = "Overall Score", y = "League") +
theme( legend.position = "none",plot.title = element_text(size = 14))
# ðŸ“Š **Graph 2
p2 <- ggplot(df_clean) +
aes(x = Age, y=reorder(LeagueRanked, -League_Rank), fill = LeagueRanked) +  # Sort leagues by rank
geom_boxplot( color = "666666") +
scale_fill_observable()+
labs(title = "Age Distribution", x = "Age", y = NULL) +
theme(axis.text.y = element_blank(), legend.position = "none",plot.title = element_text(size = 14))
# ðŸ–¼ **Combine the graphs horizontally**
p1 + p2 + plot_layout(ncol = 2)+
plot_annotation(title = "Overall Score and Age Distribution Across Top Football Leagues")
ggplot(df_clean) +
aes(x = Overall.Score, y = Potential.Score, color = Quadrant) +
geom_jitter(alpha = 0.6) +
scale_color_manual(values = c(
"High Overall, High Potential" = "#1b9e77",
"High Overall, Low Potential" = "#d95f02",
"Low Overall, High Potential" = "#7570b3",
"Low Overall, Low Potential" = "#e7298a"
)) +
# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall$`median(Overall.Score, na.rm = TRUE)`), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential$`median(Potential.Score, na.rm = TRUE)`), color = "gray40", linetype = "dashed", linewidth = 1) +
facet_wrap(vars(reorder(LeagueRanked, League_Rank)),  ncol = 5L) +
labs(title = "Where Future Superstars Emerge",
x = "Overall Score",
y = "Potential Score") +
theme(legend.position = "right",
legend.key.height = unit(1, "cm"),
plot.title = element_text(size = 14))
ggplot(df_clean) +
aes(x = Overall.Score, y = Potential.Score, color = Quadrant) +
geom_jitter(alpha = 0.6) +
scale_color_manual(values = c(
"High Overall, High Potential" = "#1b9e77",
"High Overall, Low Potential" = "#d95f02",
"Low Overall, High Potential" = "#7570b3",
"Low Overall, Low Potential" = "#e7298a"
)) +
# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) +
facet_wrap(vars(reorder(LeagueRanked, League_Rank)),  ncol = 5L) +
labs(title = "Where Future Superstars Emerge",
x = "Overall Score",
y = "Potential Score") +
theme(legend.position = "right",
legend.key.height = unit(1, "cm"),
plot.title = element_text(size = 14))

# OLS for all factories
Model1 <- lm(fac1849_total_pc ~ edu1849_adult_yos + pop1849_young + pop1849_old + area1816_qkm, data = df_main)
#Open the data source
df_fixed <- read_dta("C:\\Users\\Olga\\Desktop\\Обучение\\01. Thesis\\0. my R projects\\1. Seminar Econometrics\\0. Data\\fixed.dta")
df_main <- read_dta("C:\\Users\\Olga\\Desktop\\Обучение\\01. Thesis\\0. my R projects\\1. Seminar Econometrics\\0. Data\\main.dta")
df_county1849 <- read_dta("C:\\Users\\Olga\\Desktop\\Обучение\\01. Thesis\\0. my R projects\\1. Seminar Econometrics\\0. Data\\county1849.dta")
#Table 1 from Appendix A: Education and Industrialization in the First Phase of the Industrial Revolution
# Ordinary Least Squares (OLS) regression models for different categories of factories
# OLS for all factories
Model1 <- lm(fac1849_total_pc ~ edu1849_adult_yos + pop1849_young + pop1849_old + area1816_qkm, data = df_main)
# OLS excluding metal and textile factories
Model2 <- lm(fac1849_other_pc ~ edu1849_adult_yos + pop1849_young + pop1849_old + area1816_qkm, data = df_main)
# OLS for metal factories only
Model3 <- lm(fac1849_metal_pc ~ edu1849_adult_yos + pop1849_young + pop1849_old + area1816_qkm, data = df_main)
# OLS for textile factories only
Model4 <- lm(fac1849_texti_pc ~ edu1849_adult_yos + pop1849_young + pop1849_old + area1816_qkm, data = df_main)
# Cluster robust standard errors at the level of the 280 units of observation in the 1816-original counties
cluster_var <- (df_main$max_kreiskey1800)
# Adjusting models for clustered standard errors
Model1_robust <- coeftest(Model1, vcov = vcovCL(Model1, cluster = cluster_var))
Model2_robust <- coeftest(Model2, vcov = vcovCL(Model2, cluster = cluster_var))
Model3_robust <- coeftest(Model3, vcov = vcovCL(Model3, cluster = cluster_var))
Model4_robust <- coeftest(Model4, vcov = vcovCL(Model4, cluster = cluster_var))
# Compiling the models for easier comparison and output presentation
model_list <- list(Model1_robust, Model2_robust, Model3_robust, Model4_robust)
# Setting custom names for the model coefficients for clearer interpretation in the output
custom_names <- c("(Intercept)"="Intercept",
"edu1849_adult_yos" = "Years of schooling 1849",
"pop1849_young" = "Share of population < 15 years",
"pop1849_old" = "Share of population > 60 years",
"area1816_qkm"="County area (in 1,000 km²)"  )
# Display regression results in HTML format, setting custom notes
htmlreg(l = model_list, digits = 3, custom.coef.names = custom_names,
custom.note = "Model 1 - All factories, <br>
Model 2 - All except metal and textile, <br>
Model 3 - Metal factories,<br>
Model 4 - Textile factories") %>%
HTML() %>%
browsable()
ls("package:texreg")
rm(list=ls())
#Install and load all required libraries
# install.packages("htmlreg")
#
install.packages("textreg")
# install.packages("AER")
# install.packages("ivreg")
# install.packages("foreign")
# install.packages("haven")
# install.packages("magrittr")
# install.packages("htmltools")
# install.packages("multiwayvcov")
library(AER)
library(sandwich)
library(lmtest)
library(AER)
library(foreign)
library(haven)
library(ivreg)
library(multiwayvcov)
library(magrittr)
library(htmltools)
library(textreg)
install.packages("textreg")
#Open the data source
df_fixed <- read_dta("C:\\Users\\Olga\\Desktop\\Обучение\\01. Thesis\\0. my R projects\\1. Seminar Econometrics\\0. Data\\fixed.dta")
rm(list=ls())
#Install and load all required libraries
# install.packages("htmlreg")
#install.packages("textreg")
# install.packages("AER")
# install.packages("ivreg")
# install.packages("foreign")
# install.packages("haven")
# install.packages("magrittr")
# install.packages("htmltools")
# install.packages("multiwayvcov")
library(AER)
library(sandwich)
library(lmtest)
library(AER)
library(foreign)
library(haven)
library(ivreg)
library(multiwayvcov)
library(magrittr)
library(htmltools)
library(textreg)
#Open the data source
df_fixed <- read_dta("C:\\Users\\Olga\\Desktop\\Обучение\\01. Thesis\\0. my R projects\\1. Seminar Econometrics\\0. Data\\fixed.dta")
df_main <- read_dta("C:\\Users\\Olga\\Desktop\\Обучение\\01. Thesis\\0. my R projects\\1. Seminar Econometrics\\0. Data\\main.dta")
df_county1849 <- read_dta("C:\\Users\\Olga\\Desktop\\Обучение\\01. Thesis\\0. my R projects\\1. Seminar Econometrics\\0. Data\\county1849.dta")
#Table 1 from Appendix A: Education and Industrialization in the First Phase of the Industrial Revolution
# Ordinary Least Squares (OLS) regression models for different categories of factories
# OLS for all factories
Model1 <- lm(fac1849_total_pc ~ edu1849_adult_yos + pop1849_young + pop1849_old + area1816_qkm, data = df_main)
# OLS excluding metal and textile factories
Model2 <- lm(fac1849_other_pc ~ edu1849_adult_yos + pop1849_young + pop1849_old + area1816_qkm, data = df_main)
# OLS for metal factories only
Model3 <- lm(fac1849_metal_pc ~ edu1849_adult_yos + pop1849_young + pop1849_old + area1816_qkm, data = df_main)
# OLS for textile factories only
Model4 <- lm(fac1849_texti_pc ~ edu1849_adult_yos + pop1849_young + pop1849_old + area1816_qkm, data = df_main)
# Cluster robust standard errors at the level of the 280 units of observation in the 1816-original counties
cluster_var <- (df_main$max_kreiskey1800)
# Adjusting models for clustered standard errors
Model1_robust <- coeftest(Model1, vcov = vcovCL(Model1, cluster = cluster_var))
Model2_robust <- coeftest(Model2, vcov = vcovCL(Model2, cluster = cluster_var))
Model3_robust <- coeftest(Model3, vcov = vcovCL(Model3, cluster = cluster_var))
Model4_robust <- coeftest(Model4, vcov = vcovCL(Model4, cluster = cluster_var))
# Compiling the models for easier comparison and output presentation
model_list <- list(Model1_robust, Model2_robust, Model3_robust, Model4_robust)
# Setting custom names for the model coefficients for clearer interpretation in the output
custom_names <- c("(Intercept)"="Intercept",
"edu1849_adult_yos" = "Years of schooling 1849",
"pop1849_young" = "Share of population < 15 years",
"pop1849_old" = "Share of population > 60 years",
"area1816_qkm"="County area (in 1,000 km²)"  )
# Display regression results in HTML format, setting custom notes
htmlreg(l = model_list, digits = 3, custom.coef.names = custom_names,
custom.note = "Model 1 - All factories, <br>
Model 2 - All except metal and textile, <br>
Model 3 - Metal factories,<br>
Model 4 - Textile factories") %>%
HTML() %>%
browsable()
#Table 1 from Appendix A: Education and Industrialization in the First Phase of the Industrial Revolution
# Ordinary Least Squares (OLS) regression models for different categories of factories
# OLS for all factories
Model1 <- lm(fac1849_total_pc ~ edu1849_adult_yos + pop1849_young + pop1849_old + area1816_qkm, data = df_main)
# OLS excluding metal and textile factories
Model2 <- lm(fac1849_other_pc ~ edu1849_adult_yos + pop1849_young + pop1849_old + area1816_qkm, data = df_main)
# OLS for metal factories only
Model3 <- lm(fac1849_metal_pc ~ edu1849_adult_yos + pop1849_young + pop1849_old + area1816_qkm, data = df_main)
# OLS for textile factories only
Model4 <- lm(fac1849_texti_pc ~ edu1849_adult_yos + pop1849_young + pop1849_old + area1816_qkm, data = df_main)
# Cluster robust standard errors at the level of the 280 units of observation in the 1816-original counties
cluster_var <- (df_main$max_kreiskey1800)
# Adjusting models for clustered standard errors
Model1_robust <- coeftest(Model1, vcov = vcovCL(Model1, cluster = cluster_var))
Model2_robust <- coeftest(Model2, vcov = vcovCL(Model2, cluster = cluster_var))
Model3_robust <- coeftest(Model3, vcov = vcovCL(Model3, cluster = cluster_var))
Model4_robust <- coeftest(Model4, vcov = vcovCL(Model4, cluster = cluster_var))
# Compiling the models for easier comparison and output presentation
model_list <- list(Model1_robust, Model2_robust, Model3_robust, Model4_robust)
# Setting custom names for the model coefficients for clearer interpretation in the output
custom_names <- c("(Intercept)"="Intercept",
"edu1849_adult_yos" = "Years of schooling 1849",
"pop1849_young" = "Share of population < 15 years",
"pop1849_old" = "Share of population > 60 years",
"area1816_qkm"="County area (in 1,000 km²)"  )
# Display regression results in HTML format, setting custom notes
htmlreg(l = model_list, digits = 3, custom.coef.names = custom_names,
custom.note = "Model 1 - All factories, <br>
Model 2 - All except metal and textile, <br>
Model 3 - Metal factories,<br>
Model 4 - Textile factories") %>%
HTML() %>%
browsable()
library(pander)
pander(m)
library(pander)
pander(m)
library(pander)
pander(model_list)
# Display regression results in HTML format, setting custom notes
htmlreg(l = model_list, digits = 3, custom.coef.names = custom_names,
custom.note = "Model 1 - All factories, <br>
Model 2 - All except metal and textile, <br>
Model 3 - Metal factories,<br>
Model 4 - Textile factories") %>%
HTML() %>%
browsable()
# Display regression results in HTML format, setting custom notes
htmlreg(l = model_list, digits = 3, custom.coef.names = custom_names,
custom.note = "Model 1 - All factories, <br>
Model 2 - All except metal and textile, <br>
Model 3 - Metal factories,<br>
Model 4 - Textile factories") %>%
HTML() %>%
browsable()
library(textreg)
# Display regression results in HTML format, setting custom notes
htmlreg(l = model_list, digits = 3, custom.coef.names = custom_names,
custom.note = "Model 1 - All factories, <br>
Model 2 - All except metal and textile, <br>
Model 3 - Metal factories,<br>
Model 4 - Textile factories") %>%
HTML() %>%
browsable()
library(textreg)
library(htmltools)
# Display regression results in HTML format, setting custom notes
htmlreg(l = model_list, digits = 3, custom.coef.names = custom_names,
custom.note = "Model 1 - All factories, <br>
Model 2 - All except metal and textile, <br>
Model 3 - Metal factories,<br>
Model 4 - Textile factories") %>%
HTML() %>%
browsable()
library(textreg)
library(htmltools)
library(AER)
library(sandwich)
library(lmtest)
library(AER)
library(foreign)
library(haven)
library(ivreg)
library(multiwayvcov)
library(magrittr)
library(htmltools)
library(textreg)
# Display regression results in HTML format, setting custom notes
htmlreg(l = model_list, digits = 3, custom.coef.names = custom_names,
custom.note = "Model 1 - All factories, <br>
Model 2 - All except metal and textile, <br>
Model 3 - Metal factories,<br>
Model 4 - Textile factories") %>%
HTML() %>%
browsable()
rm(list = ls())
install.packages("hrbrthemes")
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggrepel)
library(scales)
library(plotly)
install.packages("hrbrthemes")
rm(list = ls())
#install.packages("hrbrthemes")
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggrepel)
library(scales)
library(plotly)
library(hrbrthemes)
rm(list = ls())
#install.packages("hrbrthemes")
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggrepel)
library(scales)
library(plotly)
library(hrbrthemes)
setwd("C:\\Users\\Olga\\0. VS Code\\Github\\visualizations\\")
df<-read.csv("data\\fifa_players.csv")%>%
filter(Source_File=="combined_fifa_players_20241112_163726")
top_leagues <- c("Serie A (Italy)", "La Liga (Spain)", "Premier League (England)",
"Série A (Brazil)", "Bundesliga (Germany)", "Liga Profesional de Fútbol (Argentina)",
"Primeira Liga (Portugal)", "Ligue 1 (France)", "Pro League (Belgium)",
"Eredivisie (Netherlands)", "Süper Lig (Türkiye)")
df_clean<- df %>%  mutate(
Wage  = str_remove_all(Wage, "€"),
Wage  = str_replace(Wage, "K", ""),
Wage = as.numeric(Wage),
Value  = str_remove_all(Value, "€"),
Value  = str_replace(Value, "K", ""),
Value = as.numeric(Value),
Release.Clause  = str_remove_all(Release.Clause, "€"),
Release.Clause  = str_replace(Release.Clause, "K", ""),
Release.Clause = as.numeric(Release.Clause),
Contract.Start = as.numeric(Contract.Start),
Contract.End = as.numeric(Contract.End),
Contract.Duration=Contract.End-Contract.Start,
Height_cm = as.numeric(str_extract(Height, "\\d+")),
Weight_kg = as.numeric(str_extract(Weight, "\\d+")),
Finishing = as.numeric(str_remove(Finishing, "\\+\\d+")),
Overall.Score = as.numeric(str_remove(Overall.Score, "\\+\\d+")),
Potential.Score = as.numeric(str_remove(Potential.Score, "\\+\\d+")),
Role = case_when(
str_detect(Best.Position, "ST|CF|LW|RW") ~ "Attacker",
str_detect(Best.Position, "CM|CAM|CDM|LM|RM|LWB|RWB") ~ "Midfielder",
str_detect(Best.Position, "CB|LB|RB") ~ "Defender",
str_detect(Best.Position, "GK") ~ "Goalkeeper",
TRUE ~ "Unknown"
),
Performance_Score= case_when(
str_detect(Role,  "Attacker") ~ (5 * as.numeric(Finishing)) +
(4 * as.numeric(Dribbling)) +
(3 * as.numeric(Shot.Power)) +
(2 * as.numeric(Sprint.Speed))+
(1 * as.numeric(Attack.Position)),
str_detect(Role, "Midfielder") ~ (5 * as.numeric(Short.Passing)) +
(3 * as.numeric(Dribbling)) +
(4 * as.numeric(Vision)) +
(2 * as.numeric(Long.Passing)) +
(1 * as.numeric(Stamina)),
str_detect(Role, "Defender") ~ (5 * as.numeric(Standing.Tackle)) +
(4 * as.numeric(Interceptions)) +
(3 * as.numeric(Strength)) +
(2 * as.numeric(Defensive.Awareness)) +
(1 * as.numeric(Heading.Accuracy)),
str_detect(Role, "Goalkeeper") ~ (5 * as.numeric(GK.Reflexes)) +
(4 * as.numeric(GK.Diving)) +
(3 * as.numeric(GK.Handling)) +
(2 * as.numeric(GK.Positioning))+
(1 * as.numeric(GK.Positioning)),
TRUE ~ as.numeric(Overall.Score)  # Default if no match
),
mylabel = paste0(Player, " earns €", Wage, "K,", "\n",
"and has a Score of ", Performance_Score, "."))  %>%
filter(Role != "Unknown", !is.na(Wage), !is.na(Performance_Score), !is.na(Contract.Duration), League %in% top_leagues) %>%
select(-c(Position, Player.ID, Loan.End, Attacking.Work.Rate,
Defensive.Work.Rate, Source_File, Joined.Team))
england<-df_clean%>% filter(League== 	"Premier League (England)")
colnames(df_clean)
colnames(df_clean)
glimpse(df_clean)
ggplot(df_clean) +
aes(x = Overall.Score) +
geom_density(fill = "#112446") +
theme_ft_rc()+
theme(legend.text = element_text(size = 12L), legend.title = element_text(size = 14L)) +
facet_wrap(vars(League),
nrow = 5L)
ggplot(df_clean) +
aes(x = Overall.Score, y = Potential.Score) +
geom_jitter() +
theme_ft_rc()+
theme(legend.text = element_text(size = 12L), legend.title = element_text(size = 14L)) +
facet_wrap(vars(League),
nrow = 5L)
ggplot(df_clean) +
aes(x = Overall.Score, y = Contract.Duration) +
geom_jitter() +
theme_ft_rc()+
theme(legend.text = element_text(size = 12L), legend.title = element_text(size = 14L)) +
facet_wrap(vars(League),
nrow = 5L)
ggplot(df_clean) +
aes(x = League) +
geom_bar(fill = "#112446") +
coord_flip() +
theme_ft_rc()+
theme(plot.caption = element_text(size = 15L), axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L),
axis.text.y = element_text(face = "bold", size = 14L), axis.text.x = element_text(size = 12L),
legend.text = element_text(face = "bold", size = 14L), legend.title = element_text(face = "bold",
size = 16L))
ggplot(df_clean) +
aes(x = Age, y = League) +
geom_boxplot(fill = "#112446") +
hrbrthemes::theme_ipsum_ps() +
theme(plot.caption = element_text(size = 15L), axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L),
axis.text.y = element_text(face = "bold", size = 14L), axis.text.x = element_text(size = 12L),
legend.text = element_text(face = "bold", size = 14L), legend.title = element_text(face = "bold",
size = 16L))
ggplot(df_clean) +
aes(x = Age, y = Role) +
geom_boxplot(fill = "#112446") +
theme_ft_rc()+
theme(plot.caption = element_text(size = 15L), axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L),
axis.text.y = element_text(face = "bold", size = 14L), axis.text.x = element_text(size = 12L),
legend.text = element_text(face = "bold", size = 14L), legend.title = element_text(face = "bold",
size = 16L))
ggplot(df_clean) +
aes(x = Age, y = League) +
geom_boxplot(fill = "#112446") +
theme_ft_rc()+
theme(plot.caption = element_text(size = 15L), axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L),
axis.text.y = element_text(face = "bold", size = 14L), axis.text.x = element_text(size = 12L),
legend.text = element_text(face = "bold", size = 14L), legend.title = element_text(face = "bold",
size = 16L)) +
facet_wrap(vars(Role), nrow = 1L)
ggplot(df_clean) +
aes(x = Age, y = Growth) +
geom_jitter() +
theme_ft_rc()+
theme(plot.caption = element_text(size = 15L),
axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L), axis.text.y = element_text(face = "bold",
size = 14L), axis.text.x = element_text(size = 12L), legend.text = element_text(face = "bold",
size = 14L), legend.title = element_text(face = "bold", size = 16L))
ggplot(df_clean) +
aes(x = Overall.Score) +
geom_density(fill = "#112446") +
theme_ipsum_rc()+
theme(legend.text = element_text(size = 12L), legend.title = element_text(size = 14L)) +
facet_wrap(vars(League),
nrow = 5L)
ggplot(df_clean) +
aes(x = Overall.Score, y = Potential.Score) +
geom_jitter() +
theme_ipsum_rc()+
theme(legend.text = element_text(size = 12L), legend.title = element_text(size = 14L)) +
facet_wrap(vars(League),
nrow = 5L)
ggplot(df_clean) +
aes(x = Overall.Score, y = Contract.Duration) +
geom_jitter() +
theme_ipsum_rc()+
theme(legend.text = element_text(size = 12L), legend.title = element_text(size = 14L)) +
facet_wrap(vars(League),
nrow = 5L)
ggplot(df_clean) +
aes(x = League) +
geom_bar(fill = "#112446") +
coord_flip() +
theme_ipsum_rc()+
theme(plot.caption = element_text(size = 15L), axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L),
axis.text.y = element_text(face = "bold", size = 14L), axis.text.x = element_text(size = 12L),
legend.text = element_text(face = "bold", size = 14L), legend.title = element_text(face = "bold",
size = 16L))
ggplot(df_clean) +
aes(x = Age, y = League) +
geom_boxplot(fill = "#112446") +
theme_ipsum_rc()+
theme(plot.caption = element_text(size = 15L), axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L),
axis.text.y = element_text(face = "bold", size = 14L), axis.text.x = element_text(size = 12L),
legend.text = element_text(face = "bold", size = 14L), legend.title = element_text(face = "bold",
size = 16L))
ggplot(df_clean) +
aes(x = Age, y = Role) +
geom_boxplot(fill = "#112446") +
theme_ipsum_rc()+
theme(plot.caption = element_text(size = 15L), axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L),
axis.text.y = element_text(face = "bold", size = 14L), axis.text.x = element_text(size = 12L),
legend.text = element_text(face = "bold", size = 14L), legend.title = element_text(face = "bold",
size = 16L))
ggplot(df_clean) +
aes(x = Age, y = League) +
geom_boxplot(fill = "#112446") +
theme_ipsum_rc()+
theme(plot.caption = element_text(size = 15L), axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L),
axis.text.y = element_text(face = "bold", size = 14L), axis.text.x = element_text(size = 12L),
legend.text = element_text(face = "bold", size = 14L), legend.title = element_text(face = "bold",
size = 16L)) +
facet_wrap(vars(Role), nrow = 1L)
ggplot(df_clean) +
aes(x = Age, y = Growth) +
geom_jitter() +
theme_ipsum_rc()+
theme(plot.caption = element_text(size = 15L),
axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L), axis.text.y = element_text(face = "bold",
size = 14L), axis.text.x = element_text(size = 12L), legend.text = element_text(face = "bold",
size = 14L), legend.title = element_text(face = "bold", size = 16L))
ggplot(df_clean) +
aes(x = League) +
geom_bar(fill = "#112446") +
coord_flip() +
theme_ipsum_rc()+
theme(plot.caption = element_text(size = 15L), axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L),
axis.text.y = element_text(face = "bold", size = 14L), axis.text.x = element_text(size = 12L),
legend.text = element_text(face = "bold", size = 14L), legend.title = element_text(face = "bold",
size = 16L))
ggplot(df_clean) +
aes(x = reorder(League, -table(League)[League]))) +
ggplot(df_clean) +
aes(x = reorder(League, -table(League)[League])) +
geom_bar(fill = "#112446") +
coord_flip() +
theme_ipsum_rc()+
theme(plot.caption = element_text(size = 15L), axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L),
axis.text.y = element_text(face = "bold", size = 14L), axis.text.x = element_text(size = 12L),
legend.text = element_text(face = "bold", size = 14L), legend.title = element_text(face = "bold",
size = 16L)) +
labs(title = "Number of Players per League", x = "League", y = "Count of Players")
ggplot(df_clean) +
aes(x = reorder(League, table(League)[League])) +
geom_bar(fill = "#112446") +
coord_flip() +
theme_ipsum_rc()+
theme(plot.caption = element_text(size = 15L), axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L),
axis.text.y = element_text(face = "bold", size = 14L), axis.text.x = element_text(size = 12L),
legend.text = element_text(face = "bold", size = 14L), legend.title = element_text(face = "bold",
size = 16L)) +
labs(title = "Number of Players per League", x = "League", y = "Count of Players")
library(esquisse)
esquisser(df_clean)
ggplot(df_clean) +
aes(x = reorder(League, table(League)[League])) +
geom_bar(fill = "#112446") +
coord_flip() +
theme_ipsum_rc()+
theme(plot.caption = element_text(size = 15L), axis.title.y = element_text(size = 15L), axis.title.x = element_text(size = 15L),
axis.text.y = element_text(face = "bold", size = 14L), axis.text.x = element_text(size = 12L),
legend.text = element_text(face = "bold", size = 14L), legend.title = element_text(face = "bold",
size = 16L)) +
labs(title = "Number of Players per League", x = "League", y = "Count of Players")
rm(list = ls())
#install.packages("hrbrthemes")
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggrepel)
library(scales)
library(plotly)
library(hrbrthemes)
###Download Fonts
install.packages("extrafont")
library(extrafont)
font_import()
install.packages("extrafont")
rm(list = ls())
#install.packages("hrbrthemes")
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(ggrepel)
library(scales)
library(plotly)
library(hrbrthemes)
###Download Fonts
#install.packages("extrafont")
library(extrafont)
font_import()

"Stamina", "Standing.Tackle", "Interceptions", "Strength",
"Defensive.Awareness", "Heading.Accuracy", "Crossing","Overall.Score",
"Potential.Score", "Composure", "Reactions","International.Reputation", "Aggression",
"Total.Movement", "Total.Power", "Total.Defending", "Total.Mentality", "Total.Stats" ,"Volleys","Curve","FK.Accuracy","Ball.Control", "Acceleration","Agility","Balance","Jumping" ,"Long.Shots", "Penalties","Sliding.tackle")
df_clean<- df %>%
left_join(league_rankings, by = "League") %>%
mutate(
Wage = as.numeric(str_replace_all(str_remove_all(Wage, "€"), c("K" = "000", "M" = "000000"))),
Value = as.numeric(str_replace_all(str_remove_all(Value, "€"), c("K" = "000", "M" = "000000"))),
Contract.Start = as.numeric(Contract.Start),
Contract.End = as.numeric(Contract.End),
Contract.Duration=Contract.End-Contract.Start,
Height_cm = as.numeric(str_extract(Height, "\\d+")),
Weight_kg = as.numeric(str_extract(Weight, "\\d+")),
Left_Foot = ifelse(Preferred.Foot == "Left", 1, 0),
across(all_of(numeric_vars),
~ as.numeric(str_remove(., "\\+\\d+"))),
Role = case_when(
#Option1
str_detect(Best.Position, "LW|RW") ~ "Winger",
str_detect(Best.Position, "ST|CF") ~ "Striker",
str_detect(Best.Position, "CM|CAM|CDM") ~ "Central Midfielder",
str_detect(Best.Position, "CB") ~ "Central Defender",
str_detect(Best.Position, "RWB|LWB|LB|RB") ~ "Side Defender",
str_detect(Best.Position, "LM|RM") ~ "Side Midfielder",
TRUE ~ "Unknown"
),
LeagueRanked = paste0("#", League_Rank, " ", League)
) %>%
filter(Role != "Unknown", !is.na(Overall.Score), !is.na(Wage),   !is.na(Contract.Duration), League %in% league_rankings$League, Best.Position != "GK")%>%
dplyr::select(
-c(Position, Player.ID, Loan.End, Attacking.Work.Rate, Defensive.Work.Rate,
Source_File, Joined.Team, Height, Weight, Real.Face, Body.Type,
Contract.Start, Contract.End, Total.Goalkeeping,Preferred.Foot,Best.Overall,Release.Clause, Weak.Foot,Best.Position),
-matches("^(GK\\.|Total\\.)")
)
#Calculate median overall and potential scores across all players
median_overall <- df_clean %>%
summarise(median_value = median(Overall.Score, na.rm = TRUE)) %>%
pull(median_value)  # Converts it to a vector
median_potential <- df_clean %>%
summarise(median_value = median(Potential.Score, na.rm = TRUE)) %>%
pull(median_value)
#Assign performance categories, calculating the share of each category per League
df_clean<-df_clean %>% mutate( 'Performance Category' = case_when(
Overall.Score >= median_overall & Potential.Score >=median_potential ~ "High Overall, High Potential",  # "High Overall, High Potential"
Overall.Score >= median_overall & Potential.Score < median_potential ~ "High Overall, Low Potential", # "High Overall, Low Potential"
Overall.Score < median_overall & Potential.Score >= median_potential ~ "Low Overall, High Potential", #  "Low Overall, High Potential"
Overall.Score < median_overall & Potential.Score < median_potential ~ "Low Overall, Low Potential" # "Low Overall, Low Potential"
)) %>%
group_by(LeagueRanked) %>%
mutate(Total_Count = n()) %>%
group_by(LeagueRanked, `Performance Category`) %>%
mutate(Count = n()) %>%
mutate(Percentage = round((Count / Total_Count) * 100, 0)) %>%
group_by(LeagueRanked) %>%
mutate(
x_pos = case_when(
`Performance Category` %in% c("High Overall, High Potential", "High Overall, Low Potential") ~ 90,
`Performance Category` %in% c("Low Overall, High Potential", "Low Overall, Low Potential") ~ 50
),
y_pos = case_when(
`Performance Category` %in% c("High Overall, High Potential", "Low Overall, High Potential") ~ 90,
`Performance Category` %in% c("High Overall, Low Potential", "Low Overall, Low Potential") ~ 60
)
) %>%
ungroup()
avg_wage_per_league <- df_clean %>%
group_by(LeagueRanked,League_Rank) %>%
summarise(Average_Wage = mean(Wage, na.rm = TRUE) / 1000)
head(df_clean)
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 4) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 12)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 4) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
avg_wage_by_league_role <- df_clean %>%
group_by(LeagueRanked, League, Role, League_Rank) %>%
summarise(Average_Wage = round(mean(Wage, na.rm = TRUE)/1000,0)) %>%
group_by(LeagueRanked) %>%
mutate(Role_Rank = dense_rank(desc(Average_Wage))) %>%
ungroup()%>%
mutate(Highlight = case_when(
Role == "Winger" ~ "Winger",
Role == "Side Midfielder" ~ "Side Midfielder",
TRUE ~ "Other"
))
# Plotting the average wage
library(tidytext)  # For reorder_within()
# Plot with Roles Ordered Separately for Each League
ggplot(avg_wage_by_league_role%>%filter(League %in% c("Bundesliga (Germany)", "Serie A (Italy)", "La Liga (Spain)",
"Ligue 1 (France)", "Premier League (England)"))) +
aes(x = reorder_within(Role, -Average_Wage, LeagueRanked),
y = Average_Wage,
fill = Highlight) +
geom_col(width = 0.7) +
scale_fill_manual(values = c(
"Winger" = "#FF6FB5",
"Side Midfielder" = "#8BD3E6",
"Other" = "gray80"
))+
facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 5, scales = "free_x") +  # Allow independent ordering
scale_x_reordered() +  # Fix axis labels after reordering
labs(
title = "Average Wage by Role in Top Football Leagues",
x = "Role",
y = "Average Wage (€K)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.text = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 10),
legend.position = "none"
)
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
avg_wage_by_league_role <- df_clean %>%
group_by(LeagueRanked, League, Role, League_Rank) %>%
summarise(Average_Wage = round(mean(Wage, na.rm = TRUE)/1000,0)) %>%
group_by(LeagueRanked) %>%
mutate(Role_Rank = dense_rank(desc(Average_Wage))) %>%
ungroup()%>%
mutate(Highlight = case_when(
Role == "Winger" ~ "Winger",
Role == "Side Midfielder" ~ "Side Midfielder",
TRUE ~ "Other"
))
# Plotting the average wage
library(tidytext)  # For reorder_within()
# Plot with Roles Ordered Separately for Each League
ggplot(avg_wage_by_league_role%>%filter(League %in% c("Bundesliga (Germany)", "Serie A (Italy)", "La Liga (Spain)",
"Ligue 1 (France)", "Premier League (England)"))) +
aes(x = reorder_within(Role, -Average_Wage, LeagueRanked),
y = Average_Wage,
fill = Highlight) +
geom_col(width = 0.7) +
scale_fill_manual(values = c(
"Winger" = "#FF6FB5",
"Side Midfielder" = "#8BD3E6",
"Other" = "gray80"
))+
facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 5, scales = "free_x") +  # Allow independent ordering
scale_x_reordered() +  # Fix axis labels after reordering
labs(
title = "Average Wage by Role in Top Football Leagues",
x = "Role",
y = "Average Wage (€K)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.text = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 10),
legend.position = "none"
)
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(avg_wage_by_league_role%>%filter(!League %in% c("Bundesliga (Germany)", "Serie A (Italy)", "La Liga (Spain)",
"Ligue 1 (France)", "Premier League (England)"))) +
aes(x = reorder_within(Role, -Average_Wage, LeagueRanked),
y = Average_Wage,
fill = Highlight) +
geom_col(width = 0.7) +
scale_fill_manual(values = c(
"Winger" = "#FF6FB5",
"Side Midfielder" = "#8BD3E6",
"Other" = "gray80"
))+
facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 5, scales = "free_x") +  # Allow independent ordering
scale_x_reordered() +  # Fix axis labels after reordering
labs(
title = "Average Wage by Role in Top Football Leagues",
x = "Role",
y = "Average Wage (€K)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.text = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 10),
legend.position = "none"
)
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(avg_wage_by_league_role%>%filter(!League %in% c("Bundesliga (Germany)", "Serie A (Italy)", "La Liga (Spain)",
"Ligue 1 (France)", "Premier League (England)"))) +
aes(x = reorder_within(Role, -Average_Wage, LeagueRanked),
y = Average_Wage,
fill = Highlight) +
geom_col(width = 0.7) +
scale_fill_manual(values = c(
"Winger" = "#FF6FB5",
"Side Midfielder" = "#8BD3E6",
"Other" = "gray80"
))+
facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 5, scales = "free_x") +  # Allow independent ordering
scale_x_reordered() +  # Fix axis labels after reordering
labs(
title = "Average Wage by Role in Top Football Leagues",
x = "Role",
y = "Average Wage (€K)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.text = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 10),
legend.position = "none"
)
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(avg_wage_by_league_role%>%filter(!League %in% c("Bundesliga (Germany)", "Serie A (Italy)", "La Liga (Spain)",
"Ligue 1 (France)", "Premier League (England)"))) +
aes(x = reorder_within(Role, -Average_Wage, LeagueRanked),
y = Average_Wage,
fill = Highlight) +
geom_col(width = 0.7) +
scale_fill_manual(values = c(
"Winger" = "#FF6FB5",
"Side Midfielder" = "#8BD3E6",
"Other" = "gray80"
))+
facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 5, scales = "free_x") +  # Allow independent ordering
scale_x_reordered() +  # Fix axis labels after reordering
labs(
title = "Average Wage by Role in Top Football Leagues",
x = "Role",
y = "Average Wage (€K)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.text = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 10),
legend.position = "none"
)
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(avg_wage_by_league_role%>%filter(!League %in% c("Bundesliga (Germany)", "Serie A (Italy)", "La Liga (Spain)",
"Ligue 1 (France)", "Premier League (England)"))) +
aes(x = reorder_within(Role, -Average_Wage, LeagueRanked),
y = Average_Wage,
fill = Highlight) +
geom_col(width = 0.7) +
scale_fill_manual(values = c(
"Winger" = "#FF6FB5",
"Side Midfielder" = "#8BD3E6",
"Other" = "gray80"
))+
facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 5, scales = "free_x") +  # Allow independent ordering
scale_x_reordered() +  # Fix axis labels after reordering
labs(
title = "Average Wage by Role in Top Football Leagues",
x = "Role",
y = "Average Wage (€K)"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
strip.text = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 10),
legend.position = "none"
)
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 4) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 4) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 4) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
print(results_England$model_summary)
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
df_ols <- df_clean %>%
mutate(
Winger = ifelse(Role == "Winger", 1, 0),
Striker = ifelse(Role == "Striker", 1, 0),
Central_Midfielder = ifelse(Role == "Central Midfielder", 1, 0),
Central_Defender = ifelse(Role == "Central Defender", 1, 0),
Side_Defender = ifelse(Role == "Side Defender", 1, 0),
Wage = Wage / 1000
) %>%
select(
-c(Player, LeagueRanked, `Performance Category`, Role, Total_Count,Count,Percentage,x_pos,y_pos,Growth,Base.Stats,Weight_kg,League_Rank,Height_cm                  ,Jumping,Heading.Accuracy ,Sliding.tackle,Left_Foot,Contract.Duration,Penalties )) %>%
drop_na()
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
df_ols <- df_clean %>%
mutate(
Winger = ifelse(Role == "Winger", 1, 0),
Striker = ifelse(Role == "Striker", 1, 0),
Central_Midfielder = ifelse(Role == "Central Midfielder", 1, 0),
Central_Defender = ifelse(Role == "Central Defender", 1, 0),
Side_Defender = ifelse(Role == "Side Defender", 1, 0),
Wage = Wage / 1000
) %>%
dplyr::select(
-c(Player, LeagueRanked, `Performance Category`, Role, Total_Count,Count,Percentage,x_pos,y_pos,Growth,Base.Stats,Weight_kg,League_Rank,Height_cm                  ,Jumping,Heading.Accuracy ,Sliding.tackle,Left_Foot,Contract.Duration,Penalties )) %>%
drop_na()
colnames(df_ols)
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
#install.packages("caret")
#install.packages("MASS")
library(MASS)
library(caret)
library(dplyr)
run_RFE <- function(league_name, corr_threshold = 0.75, p_value_threshold = 0.05) {
data_league <- df_ols %>% filter(League == league_name) %>% dplyr::select(-"League")
X_filtered <- data_league %>% dplyr::select(-c("Wage"))
y <- data_league$Wage
corr_matrix <- cor(X_filtered, use = "pairwise.complete.obs")
high_corr_vars <- findCorrelation(corr_matrix, cutoff = corr_threshold, names = TRUE, exact = TRUE)
X_filtered <- X_filtered %>% dplyr::select(-all_of(high_corr_vars))
control <- rfeControl(functions = lmFuncs, method = "cv", number = 10)
rfe_model <- rfe(X_filtered, y, sizes = 18, rfeControl = control)
best_vars <- predictors(rfe_model)
data_league <- data_league %>% dplyr::select(Wage, Value, all_of(best_vars))
final_formula <-as.formula(paste("Wage~", paste(best_vars,collapse=" + ")))
final_model <- lm(final_formula, data = data_league)
model_summary<-summary(final_model)
significant_vars <- names(which(model_summary$coefficients[, 4] < p_value_threshold))
significant_vars <- significant_vars[significant_vars != "(Intercept)"]
if (length(significant_vars) > 0) {
final_model <- lm(as.formula(paste("Wage ~", paste(significant_vars, collapse = " + "))),
data = data_league)
model_summary <- summary(final_model)
}
return(list(data_league=data_league, model_summary=model_summary))
}
# Apply to each league
results_England <- run_RFE("Premier League (England)")
results_Germany <- run_RFE("Bundesliga (Germany)")
results_Italy   <- run_RFE("Serie A (Italy)")
results_Spain   <- run_RFE("La Liga (Spain)")
results_France  <- run_RFE("Ligue 1 (France)")
print(results_England$model_summary)
print(results_Spain$model_summary)
print(results_Germany$model_summary)
print(results_Italy$model_summary)
print(results_France$model_summary)
quarto_render("fifaplayers.qmd", output_format = "ipynb")
quarto_render("fifaplayers.qmd", output_format = "ipynb")
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 3) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 2) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 3) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 5) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 5) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 5) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 4) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), nrow = 5) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), nrow = 5) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), nrow = 5) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "right",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), nrow = 5) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "bottom",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), nrow = 4) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "bottom",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 10)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), nrow = 4) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "bottom",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 6)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), nrow = 4) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "bottom",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 2)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), nrow = 4) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "bottom",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 2)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
ggplot(df_clean %>% filter(!is.na(`Performance Category`))) + aes(x = Overall.Score, y = Potential.Score, color = `Performance Category`)+ geom_jitter(alpha = 0.6) + scale_color_manual(values = c( "High Overall, High Potential" = "#91D1C2B2","High Overall, Low Potential" = "gray20","Low Overall, High Potential" ="#1b9e77","Low Overall, Low Potential" = "666666")) +# Horizontal median line for each league
geom_vline(aes(xintercept = median_overall), color = "gray40", linetype = "dashed", linewidth = 1) +
# Vertical median line for each league
geom_hline(aes(yintercept = median_potential), color = "gray40", linetype = "dashed", linewidth = 1) + geom_text(data = df_clean%>% group_by(LeagueRanked,`Performance Category`)%>% distinct(LeagueRanked, `Performance Category`, .keep_all = TRUE) , aes(x = x_pos, y = y_pos, label = paste0(Percentage, "%")), inherit.aes = FALSE, size = 4.5,hjust = 0.5) + facet_wrap(vars(reorder(LeagueRanked, League_Rank)), ncol = 5) + labs(title = "Where Future Talants Emerge", x = "Overall Score (Mean = 70)", y = "Potential Score (Mean = 75)") + theme(legend.position = "bottom",legend.key.height = unit(1, "cm"), plot.title = element_text(size = 14))+ guides(color = guide_legend(override.aes = list(size = 2)))
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"
avg_wage_per_role <- df_clean %>%
group_by(Role) %>%
summarise(Average_Wage = mean(Wage, na.rm = TRUE) / 1000)
ggplot(avg_wage_per_role) +
aes(x = Average_Wage, y =  reorder(Role,Average_Wage), fill = Role) +
geom_col(color = "666666", width = 0.7) +  # Bar plot with custom color
scale_fill_manual(values = c(
"Winger" = "#FF6FB5",
"Side Midfielder" = "#8BD3E6",
"Other" = "gray80"
))+
labs(
title = "Average Wages by Football Roles",
x = "Average Wage  (€K)",
y = "Role"
) +
theme(
legend.position = "none",
)
